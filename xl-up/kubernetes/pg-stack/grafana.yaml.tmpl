---
apiVersion: v1
kind: Secret
data:
  admin-password: {{ .monitoringUserPass | b64enc }}
  admin-username: {{ .monitoringUser | b64enc }}
metadata:
  name: grafana
  namespace: {{ .Namespace }}
type: Opaque
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: {{ .Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      initContainers:
        - name: fix-the-volume-permission
          image: busybox
          command:
            - sh
            - -c
            - chown -R 472 /var/lib/grafana
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
      containers:
      - image: grafana/grafana:5.4.3
        name: grafana
        env:
          # The following env variables set up basic auth twith the default admin user and admin password.
          - name: GF_AUTH_BASIC_ENABLED
            value: "true"
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: grafana
                key: admin-username
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana
                key: admin-password
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "false"
          - name: GF_SERVER_ROOT_URL
            value: "%(protocol)s://%(domain)s/grafana/"
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 100m
            memory: 0.2Gi
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: grafana-storage
          readOnly: false
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: {{ .Namespace }}
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  {{if eq .K8sSetup "AWS EKS" }}
  storageClassName: gp2
  {{else if eq .K8sSetup "Plain multinode K8s cluster" }}
  storageClassName: managed-nfs-storage
  {{end}}
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{ .Namespace }}
  labels:
    app: grafana
    component: core
spec:
  type: ClusterIP
  ports:
    - port: 3000
#      nodePort: 30300
  selector:
    app: grafana
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: grafana
  namespace: {{ .Namespace }}
  labels:
    app: grafana
  annotations:
    kubernetes.io/ingress.class: haproxy
    ingress.kubernetes.io/rewrite-target: /
    ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - http:
        paths:
          - path: /grafana/
            backend:
              serviceName: grafana
              servicePort: 3000
---
apiVersion: batch/v1
kind: Job
metadata:
  name: grafana-import-dashboards
  namespace: {{ .Namespace }}
  labels:
    app: grafana
    component: import-dashboards
spec:
  template:
    metadata:
      name: grafana-import-dashboards
      labels:
        app: grafana
        component: import-dashboards
    spec:
      initContainers:
      - name: wait-for-grafana
        image: xebialabsunsupported/xl-grafana-dashboards
        args:
        - /bin/sh
        - -c
        - >
          set -x;
          while [ $(curl -L --max-time 3 -sw '%{http_code}' "http://grafana.{{- .Namespace }}.svc:3000/api/health" -o /dev/null) -ne 200 ]; do
            echo '.'
            sleep 2;
          done
      containers:
      - name: grafana-import-dashboards
        image: giantswarm/tiny-tools
        command: ["/bin/sh", "/dashboard-importer.sh"]
        workingDir: /opt/grafana-import-dashboards
        env:
        - name: GF_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana
              key: admin-username
        - name: GF_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana
              key: admin-password
        volumeMounts:
        - name: config-volume
          mountPath: /opt/grafana-import-dashboards
        - name: grafana-importer
          mountPath: /dashboard-importer.sh
          subPath: dashboard-importer.sh
      restartPolicy: Never
      volumes:
      - name: config-volume
        configMap:
          name: grafana-import-dashboards
      - name: grafana-importer
        configMap:
          name: grafana-importer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-importer
  namespace: {{ .Namespace }}
data:
  dashboard-importer.sh: |
      for file in *-datasource.json ; do
        if [ -e "$file" ] ; then
          echo "importing $file" &&
          curl --silent --fail --show-error \
            --request POST http://${GF_ADMIN_USER}:${GF_ADMIN_PASSWORD}@grafana.{{- .Namespace }}.svc:3000/api/datasources \
            --header "Content-Type: application/json" \
            --data-binary "@$file" ;
          echo "" ;
        fi
      done ;
      for file in *-dashboard.json ; do
        if [ -e "$file" ] ; then
          echo "importing $file" &&
          ( echo '{"dashboard":'; \
            cat "$file"; \
            echo ',"overwrite":true,"inputs":[{"name":"DS_PROMETHEUS","type":"datasource","pluginId":"prometheus","value":"prometheus"},{"name": "VAR_JOB","type": "constant","label": "job","value": "kubernetes-pods","description": ""}]}' ) \
          | jq -c '.' \
          | curl --silent --fail --show-error \
            --request POST http://${GF_ADMIN_USER}:${GF_ADMIN_PASSWORD}@grafana.{{- .Namespace }}.svc:3000/api/dashboards/import \
            --header "Content-Type: application/json" \
            --data-binary "@-" ;
          echo "" ;
        fi
      done ;
      curl --silent --fail --show-error \
       --request POST http://${GF_ADMIN_USER}:${GF_ADMIN_PASSWORD}@grafana.{{- .Namespace }}.svc:3000/api/user/stars/dashboard/1 ;
      curl --silent --fail --show-error \
       --request PUT http://${GF_ADMIN_USER}:${GF_ADMIN_PASSWORD}@grafana.{{- .Namespace }}.svc:3000/api/user/preferences \
       --header "Content-Type: application/json" \
       --data-binary "@set-default.json" ;
