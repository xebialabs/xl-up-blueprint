apiVersion: xl/v2
kind: Blueprint
metadata:
  name: XL UP
  description: |
    This blueprint deploys XL Deploy, XL Release, and XL-k8s-foundation into an existing Kubernetes installation (local single-node Kubernetes, on-premises multi-node Kubernetes cluster, or Amazon EKS cluster).
  author: XebiaLabs
  version: 1.0
spec:
  parameters:
    - name: K8sSetup
      type: Select
      prompt: "Select the Kubernetes setup where the XebiaLabs Devops Platform will be installed:"
      options:
        - Local K8s from Docker Desktop for Mac/Windows
        - AWS EKS
        - Google Kubernetes Engine
        - Plain multinode K8s cluster
      saveInXlvals: true

    - name: useKubeconfig
      type: Confirm
      prompt: "Do you want to use Kubernetes' current-context from ~/.kube/config?"
      promptIf: !expr "k8sConfig('IsConfigAvailable')"
      default: true
      saveInXlvals: true

    - name: apiServerURL
      type: Input
      prompt: "Enter the ApiServerURL of your Kubernetes installation:"
      default: !expr "k8sConfig('ClusterServer')"
      promptIf: !expr "!useKubeconfig && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
      saveInXlvals: true

    - name: OsType
      type: Input
      prompt: "The type of operating system where the xl command is running:"
      value: !expr "os('_operatingsystem')"
      saveInXlvals: true

    - name: localApiServerURL
      type: Input
      prompt: "Enter the ApiServerURL of your Kubernetes installation:"
      value: !expr "K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows' ? os('_defaultapiserverurl') : 'none'"
      saveInXlvals: true

    - name: K8sAuthentication
      type: Select
      prompt: "Choose kubernetes authentication type:"
      options:
        - Client key/certificate [Path to files]
        - Client key/certificate [User Input]
        - Token
      promptIf: !expr "(!useKubeconfig && K8sSetup != 'AWS EKS') || K8sSetup == 'Google Kubernetes Engine' "
      saveInXlvals: true

    - name: K8sToken
      type: SecretInput
      #type: SecretEditor
      prompt: "Provide authentication token for the existing service account:"
      promptIf: !expr "K8sSetup != 'AWS EKS' && K8sAuthentication == 'Token'"
      saveInXlvals: true
      replaceAsIs: true

    - name: K8sClientCertFile
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      prompt: "Enter the full path to your Kubernetes client certificate:"
      promptIf: !expr "K8sSetup != 'AWS EKS' && K8sAuthentication == 'Client key/certificate [Path to files]'"
      saveInXlvals: true

    - name: K8sClientKeyFile
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      prompt: "Enter the full path to your Kubernetes client certificate key:"
      promptIf: !expr "K8sSetup != 'AWS EKS' && K8sAuthentication == 'Client key/certificate [Path to files]'"
      saveInXlvals: true

      # Client certificates used for Upgrade only and downloaded from the Configmap
    - name: CertFile
      type: Input
      prompt: "Enter your K8s Client Certificate:"
      value: !expr "K8sClientCertFile != '' && K8sSetup != 'AWS EKS' ? os('getcertfilelocation') : 'none'"

    - name: KeyFile
      type: Input
      prompt: "Enter your K8s Client Certificate Key:"
      value: !expr "K8sClientCertFile != '' && K8sSetup != 'AWS EKS' ? os('getkeyfilelocation') : 'none'"
      # END

    - name: K8sClientCert
      type: SecretEditor
      prompt: "Using Kubernetes client certificate from your context"
      saveInXlvals: true
      replaceAsIs: true
      value: !expr "useKubeconfig && K8sSetup != 'AWS EKS' && K8sAuthentication != 'Client key/certificate [Path to files]' && K8sAuthentication != 'Token' ? k8sConfig('UserClientCertificateData') : 'none'"

    - name: K8sClientKey
      type: SecretEditor
      prompt: "Using Kubernetes client certificate Key from your context"
      saveInXlvals: true
      replaceAsIs: true
      value: !expr "useKubeconfig && K8sSetup != 'AWS EKS' && K8sAuthentication != 'Client key/certificate [Path to files]' && K8sAuthentication != 'Token' ? k8sConfig('UserClientKeyData') : 'none'"

    - name: eksClusterName
      type: Input
      prompt: "What is the Amazon EKS cluster name?"
      promptIf: !expr "!useKubeconfig && K8sSetup == 'AWS EKS' "
      default: !expr "K8sSetup == 'AWS EKS' ? k8sConfig('ContextCluster') : 'none'"
      saveInXlvals: true

    - name: isAwsCfgAvailable
      type: Confirm
      value: !expr "K8sSetup == 'AWS EKS' ? awsCredentials('IsAvailable') : 'none'"

    - name: useAWSconfig
      type: Confirm
      prompt: "Do you want to use the AWS credentials from your ~/.aws/credentials file?"
      promptIf: !expr "isAwsCfgAvailable && K8sSetup == 'AWS EKS'"
      saveInXlvals: true

    - name: AWSAccessKey
      type: SecretInput
      prompt: "What is the AWS access key ID?"
      promptIf: !expr "!useAWSconfig && K8sSetup == 'AWS EKS' "
      saveInXlvals: true
      replaceAsIs: true
      default: !expr "K8sSetup == 'AWS EKS' ? awsCredentials('AccessKeyID')"

    - name: AWSAccessSecret
      type: SecretInput
      prompt: "What is the AWS secret access key?"
      promptIf: !expr "!useAWSconfig && K8sSetup == 'AWS EKS' "
      saveInXlvals: true
      replaceAsIs: true
      default: !expr "K8sSetup == 'AWS EKS' ? awsCredentials('SecretAccessKey')"

    - name: Namespace
      type: Input
      saveInXlvals: true
      prompt: "Enter the name of the Kubernetes namespace where the XebiaLabs DevOps Platform will be installed:"
      value: xebialabs

    - name: useCustomRegistry
      type: Confirm
      prompt: "Do you want to use custom Docker Registry?"
      default: false
      saveInXlvals: true

    - name: registryURL
      type: Input
      prompt: "Enter your Docker registry URL and organization:"
      promptIf: !expr "useCustomRegistry"
      default: "docker.io/xebialabs"
      saveInXlvals: true

    - name: dockerUser
      type: Input
      prompt: "Enter your Docker Registry username:"
      promptIf: !expr "useCustomRegistry"
      default: " "
      saveInXlvals: true
      
    - name: dockerPass
      type: SecretInput
      prompt: "Enter your Docker Registry password:"
      promptIf: !expr "useCustomRegistry"
      saveInXlvals: true
      replaceAsIs: true

    - name: InstallXLD
      type: Confirm
      prompt: "Would you like to install XL Deploy?"
      default: true
      saveInXlvals: true
    
    - name: xldVersion
      type: Input
      saveInXlvals: true
      prompt: "Enter your custom XL Deploy image and tag:"
      default: "xl-deploy:8.5.3"
      promptIf: !expr "useCustomRegistry && InstallXLD"
      validate: !expr "version('checkversion', 'xld', xldVersion)"

      # This question will not be asked but used to extract the tag information which will be used as version
    - name: xldTag
      type: Input
      saveInXlvals: true
      prompt: "Enter the XLD custom image:"
      value: !expr "(useCustomRegistry && InstallXLD) ? version('getversionfromtag', xldVersion) : 'none'"

    - name: InstallXLR
      type: Confirm
      prompt: "Would you like to install XL Release?"
      default: true
      saveInXlvals: true
    
    - name: xlrVersion
      type: Input
      saveInXlvals: true
      prompt: "Enter your custom XL Release image and tag:"
      default: "xl-release:8.5.3"
      promptIf: !expr "useCustomRegistry && InstallXLR"
      validate: !expr "version('checkversion', 'xlr', xlrVersion)"
    
      # This question will not be asked but used to extract the tag information which will be used as version
    - name: xlrTag
      type: Input
      saveInXlvals: true
      prompt: "Enter the XLR custom image:"
      value: !expr "(useCustomRegistry && InstallXLR) ? version('getversionfromtag', xlrVersion) : 'none'"

    - name: xlVersion
      type: Select
      saveInXlvals: true
      prompt: "Choose the version of the XebiaLabs DevOps Platform:"
      promptIf: !expr "!useCustomRegistry"
      options:
        - !expr "version('_showapplicableversions')"

    - name: XlRAMRequest
      type: Input
      prompt: "How many RAM resources will be requested for the XebiaLabs POD? Ex: 4Gi"
      saveInXlvals: false
      value: "1.6Gi"

    - name: XlCPURequest
      type: Input
      prompt: "How many CPU resources will be requested for the XebiaLabs POD? Ex: 2"
      saveInXlvals: false
      value: "0.7"

    - name: dockerRepo
      type: Select
      saveInXlvals: true
      prompt: "Choose a Docker repository:"
      options:
        - xebialabs
      value: xebialabs

    - name: externalDatabase
      type: Confirm
      saveInXlvals: true
      prompt: "Would you like to use an external database:"
      default: false

    - name: xldAdminPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter the password that you want to use for the XL Deploy admin user:"
      promptIf: !expr "InstallXLD"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true

    - name: xldLic
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      saveInXlvals: true
      prompt: "Enter the full path to the XL Deploy license file:"
      promptIf: !expr "InstallXLD"

    - name: xldDbUrl
      type: Input
      saveInXlvals: true
      prompt: "Enter the JDBC url of the database where XL Deploy will save its repository data:"
      promptIf: !expr "externalDatabase && InstallXLD"
      default: jdbc:postgresql://postgresql:5432/xl-deploy

    - name: xldDbName
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Deploy database name:"
      promptIf: !expr "!externalDatabase && InstallXLD"
      default: xl-deploy

    - name: xldDbUser
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Deploy database username:"
      promptIf: !expr "InstallXLD"
      default: sa

    - name: xldDbPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter your XL Deploy database password:"
      promptIf: !expr "InstallXLD"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true

    - name: efsId
      type: Input
      saveInXlvals: true
      prompt: "Enter your Amazon EFS ID:"
      promptIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"

    - name: efsRegion
      type: Input
      saveInXlvals: true
      prompt: "Enter your Amazon EFS region:"
      promptIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"

    - name: nsfServerHost
      type: Input
      saveInXlvals: true
      prompt: "Enter your NFS server name or IP address:"
      promptIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"

    - name: nsfSharePath
      type: Input
      saveInXlvals: true
      prompt: "Enter your NFS share path:"
      promptIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"

    - name: xldWorkHostpath
      type: Input
      saveInXlvals: true
      prompt: "Enter the local directory path that XL Deploy can use as a work directory:"
      promptIf: !expr "K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows' && InstallXLD && OsType != 'linux' "

    - name: xlrAdminPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter the password that you want to use for the XL Release admin user:"
      promptIf: !expr "InstallXLR"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true

    - name: xlrLic
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      saveInXlvals: true
      prompt: "Enter the full path to the XL Release license file:"
      promptIf: !expr "InstallXLR"

    - name: xlrDbUrl
      type: Input
      saveInXlvals: true
      prompt: "Enter the JDBC url of the database where XL Release will save its repository data:"
      promptIf: !expr "externalDatabase && InstallXLR"
      default: jdbc:postgresql://postgresql:5432/xl-release

    - name: xlrDbName
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Release database name:"
      promptIf: !expr "!externalDatabase && InstallXLR"
      default: xl-release

    - name: xlrDbUser
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Release database username:"
      promptIf: !expr "InstallXLR"
      default: xl-release

    - name: xlrDbPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter your XL Release database password:"
      promptIf: !expr "InstallXLR"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true

    - name: xlrReportDbUrl
      type: Input
      saveInXlvals: true
      prompt: "Enter the JDBC url of the database where XL Release will save its reporting data:"
      promptIf: !expr "externalDatabase && InstallXLR"
      default: jdbc:postgresql://postgresql:5432/xl-release-report

    - name: xlrReportDbName
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Release report database name:"
      promptIf: !expr "!externalDatabase && InstallXLR"
      default: xl-release-report

    - name: xlrReportDbUser
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Release report database username:"
      promptIf: !expr "InstallXLR"
      default: xl-release-report

    - name: xlrReportDbPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter your XL Release report database password:"
      promptIf: !expr "InstallXLR"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true

    - name: xlKeyStore
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      saveInXlvals: true
      prompt: "Enter the full path to your XebiaLabs keystore:"

    - name: xlKeyStorePass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter your XebiaLabs keystore password:"
      replaceAsIs: true

    - name: InstallMonitoring
      type: Confirm
      prompt: "Do you want to install monitoring?"
      default: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
      saveInXlvals: true

    - name: MonitoringDataRetention
      type: Input
      prompt: "How many days do you want to keep the monitoring data?"
      default: 7
      promptIf: !expr "InstallMonitoring"

    - name: monitoringUser
      type: Input
      saveInXlvals: true
      prompt: "What is the username for the monitoring user?"
      default: admin
      promptIf: !expr "InstallMonitoring"

    - name: monitoringUserPass
      type: SecretInput
      replaceAsIs: true
      saveInXlvals: true
      prompt: "What is the password for the monitoring user?"
      default: !expr "randPassword()"
      promptIf: !expr "InstallMonitoring"
      revealOnSummary: true

    - name: PostgresqlWorkHostpath
      type: Input
      saveInXlvals: true
      prompt: "Enter the local directory path where PostgreSQL can store its data:"
      promptIf: !expr "K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"

    - name: postgresMaxConn
      type: Input
      saveInXlvals: true
      prompt: "Specify the max_connections parameter for PostgreSQL:"
      default: 512
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"

    - name: postgresSharedBuff
      type: Input
      saveInXlvals: true
      prompt: "Specify the shared_buffers parameter for PostgreSQL:"
      default: 512MB
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"

    - name: postgresEffectCacheSize
      type: Input
      saveInXlvals: true
      prompt: "Specify the effective_cache_size parameter for PostgreSQL:"
      default: 1GB
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"

    - name: postgresSyncCommit
      type: Input
      saveInXlvals: true
      prompt: "Specify the synchronous_commit parameter for PostgreSQL:"
      default: "off"
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"

    - name: postgresMaxWallSize
      type: Input
      saveInXlvals: true
      prompt: "Specify the max_wal_size parameter for PostgreSQL:"
      default: 256MB
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"

  files:
    #xl-k8s-foundation
    - path: xebialabs/xl-k8s-foundation.yaml.tmpl
    - path: xebialabs/kubernetes/xl-k8s-foundation/ha-proxy-ingress-controller/ingress-controller.yaml.tmpl
    - path: xebialabs/kubernetes/xl-k8s-foundation/ha-proxy-ingress-controller/service-l7.yaml.tmpl
      writeIf: !expr "K8sSetup == 'AWS EKS' || K8sSetup == 'Google Kubernetes Engine'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/ha-proxy-ingress-controller/default-backend.yaml.tmpl
    - path: xebialabs/kubernetes/xl-k8s-foundation/xebialabs-service-internal.yaml.tmpl
    - path: xebialabs/kubernetes/xl-k8s-foundation/aws-gp2-storageclass.yaml.tmpl
      writeIf: !expr "K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/gcp-pd-retain-storageclass.yaml.tmpl
      writeIf: !expr "K8sSetup == 'Google Kubernetes Engine'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/dockercred.yaml.tmpl
      writeIf: !expr "useCustomRegistry"
    - path: xebialabs/kubernetes/xl-k8s-foundation/postgresql/xl-postgresql.yaml.tmpl
      writeIf: !expr "!externalDatabase"
    - path: xebialabs/kubernetes/xl-k8s-foundation/nfs-client-provisioner/rbac.yaml.tmpl
      writeIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/nfs-client-provisioner/deployment.yaml.tmpl
      writeIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/nfs-client-provisioner/storageclass.yaml.tmpl
      writeIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"
    #xl-deploy
    - path: xebialabs/xl-deploy.yaml.tmpl
      writeIf: InstallXLD
    - path: xebialabs/kubernetes/xl-deploy/local-db/xld-deployment-single-node.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/aws-efs/aws-efs-storageclass.yaml.tmpl
      writeIf:  !expr "InstallXLD && K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/aws-efs/aws-efs-rbac.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/aws-efs/aws-efs-deployment.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/aws-efs/aws-efs-conf.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/xld-deployment-master.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/xld-deployment-worker.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/export-pvc.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/work-pvc.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    #xl-release
    - path: xebialabs/xl-release.yaml.tmpl
      writeIf: InstallXLR
    - path: xebialabs/kubernetes/xl-release/external-db/active-active/xlr-deployment-active.yaml.tmpl
      writeIf: !expr "InstallXLR && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-release/local-db/xlr-deployment-single-node.yaml.tmpl
      writeIf: !expr "InstallXLR && K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-release/external-db/active-active/pvc.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    #efk
    - path: xebialabs/kubernetes/efk-stack/elasticsearch/rbac.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/elasticsearch/deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/es-curator/cronjob.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/es-curator/configmap.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/fluentd/rbac.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/fluentd/configmap.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/fluentd/daemonset.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/kibana/deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/kibana/ingress.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/kibana/dashboard-job.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    #pg-stack
    - path: xebialabs/kubernetes/pg-stack/prometheus/rbac.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/prometheus/configmap.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/prometheus/deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/configmap.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/secret.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/pvc.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/ingress.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/importer-job.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-cluster-role.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-cluster-role-binding.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-role.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-role-binding.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-service.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-service-account.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    #xebialabs files
    - path: xebialabs.yaml.tmpl
    - path: xebialabs/common.yaml.tmpl
    - path: xebialabs/deployments.yaml.tmpl
    - path: xebialabs/answers.yaml.tmpl
