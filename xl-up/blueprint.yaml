apiVersion: xl/v2
kind: Blueprint
metadata:
  name: XL UP
  description: |
    This blueprint deploys XL Deploy, XL Release, and XL-k8s-foundation into an existing Kubernetes installation (local single-node Kubernetes, on-premises multi-node Kubernetes cluster, or Amazon EKS cluster).
  author: XebiaLabs
  version: 1.0
spec:
  parameters:
    - name: K8sSetup
      type: Select
      prompt: "Select the Kubernetes setup where the XebiaLabs Devops Platform will be installed:"
      options:
        - Local K8s from Docker Desktop for Mac/Windows
        - AWS EKS
        - Google Kubernetes Engine
        - Plain multinode K8s cluster
      saveInXlvals: true
      description: "The flavour of Kubernetes to deploy the XebiaLabs Devops Platform to. Other flavors like Minikube are not supported, only the listed options are supported"

    - name: useKubeconfig
      type: Confirm
      prompt: "Do you want to use Kubernetes' current-context from ~/.kube/config?"
      promptIf: !expr "k8sConfig('IsConfigAvailable')"
      default: true
      saveInXlvals: true
      description: "xl up will try to read and process the current context from your $HOME/.kube/config file and get information like Kubernetes api url, client certificate, client key and token in order to connect to the Kubernetes cluster."

    - name: apiServerURL
      type: Input
      prompt: "Enter the ApiServerURL of your Kubernetes installation:"
      default: !expr "k8sConfig('ClusterServer')"
      promptIf: !expr "!useKubeconfig && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
      saveInXlvals: true
      description: "The API Server URL of your Kubernetes installation. This is usually the Kubernetes Master URL. This can be found by running kubectl cluster-info"

    - name: OsType
      type: Input
      prompt: "The type of operating system where the xl command is running:"
      value: !expr "os('_operatingsystem')"
      saveInXlvals: true

    - name: localApiServerURL
      type: Input
      prompt: "Enter the ApiServerURL of your Kubernetes installation:"
      value: !expr "K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows' ? os('_defaultapiserverurl') : 'none'"
      saveInXlvals: true
      description: "The API Server URL of your Kubernetes installation. This is usually the Kubernetes Master URL. This can be found by running kubectl cluster-info"

    - name: K8sAuthentication
      type: Select
      prompt: "Choose kubernetes authentication type:"
      options:
        - Client key/certificate [Path to files]
        - Client key/certificate [User Input]
        - Token
      promptIf: !expr "(!useKubeconfig && K8sSetup != 'AWS EKS') || K8sSetup == 'Google Kubernetes Engine' "
      saveInXlvals: true
      description: "How xl up will authenticate with your Kubernetes cluster"

    - name: K8sToken
      type: SecretInput
      #type: SecretEditor
      prompt: "Provide authentication token for the existing service account:"
      promptIf: !expr "K8sSetup != 'AWS EKS' && K8sAuthentication == 'Token'"
      saveInXlvals: true
      replaceAsIs: true
      description: "Provide an authentication token for a service account that you have previously configured in your cluster. The service account for which the token is provided should be able to create/modify resources in the Kubernetes cluster"

    - name: K8sClientCertFile
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      prompt: "Enter the full path to your Kubernetes client certificate:"
      promptIf: !expr "K8sSetup != 'AWS EKS' && K8sAuthentication == 'Client key/certificate [Path to files]'"
      saveInXlvals: true
      description: "Provide the location of your client certificate that is used to connect to Kubernetes"

    - name: K8sClientKeyFile
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      prompt: "Enter the full path to your Kubernetes client certificate key:"
      promptIf: !expr "K8sSetup != 'AWS EKS' && K8sAuthentication == 'Client key/certificate [Path to files]'"
      saveInXlvals: true
      description: "Provide the location of your client key that is used to connect to Kubernetes"

      # Client certificates used for Upgrade only and downloaded from the Configmap
    - name: CertFile
      type: Input
      prompt: "Enter your K8s Client Certificate:"
      value: !expr "K8sClientCertFile != '' && K8sSetup != 'AWS EKS' ? os('getcertfilelocation') : 'none'"
      description: "Enter the base64 encoded value of the client certificate that is used to connect to Kubernetes"

    - name: KeyFile
      type: Input
      prompt: "Enter your K8s Client Certificate Key:"
      value: !expr "K8sClientCertFile != '' && K8sSetup != 'AWS EKS' ? os('getkeyfilelocation') : 'none'"
      description: "Enter the base64 encoded value of the client key that is used to connect to Kubernetes"
      # END

    - name: K8sClientCert
      type: SecretEditor
      prompt: "Using Kubernetes client certificate from your context"
      saveInXlvals: true
      replaceAsIs: true
      value: !expr "useKubeconfig && K8sSetup != 'AWS EKS' && K8sAuthentication != 'Client key/certificate [Path to files]' && K8sAuthentication != 'Token' ? k8sConfig('UserClientCertificateData') : 'none'"

    - name: K8sClientKey
      type: SecretEditor
      prompt: "Using Kubernetes client certificate Key from your context"
      saveInXlvals: true
      replaceAsIs: true
      value: !expr "useKubeconfig && K8sSetup != 'AWS EKS' && K8sAuthentication != 'Client key/certificate [Path to files]' && K8sAuthentication != 'Token' ? k8sConfig('UserClientKeyData') : 'none'"

    - name: eksClusterName
      type: Input
      prompt: "What is the Amazon EKS cluster name?"
      promptIf: !expr "!useKubeconfig && K8sSetup == 'AWS EKS' "
      default: !expr "K8sSetup == 'AWS EKS' ? k8sConfig('ContextCluster') : 'none'"
      saveInXlvals: true
      description: "The cluster name of your AWS EKS resource. In EKS, this is usually NOT the value of your current context, but rather the simple name you specified when creating the cluster in AWS console"

    - name: isAwsCfgAvailable
      type: Confirm
      value: !expr "K8sSetup == 'AWS EKS' ? awsCredentials('IsAvailable') : 'none'"

    - name: useAWSconfig
      type: Confirm
      prompt: "Do you want to use the AWS credentials from your ~/.aws/credentials file?"
      promptIf: !expr "isAwsCfgAvailable && K8sSetup == 'AWS EKS'"
      saveInXlvals: true
      description: "Use the currently configured profile and associated credentials from your $HOME/.aws/credentials file. From this file xl up will get the credentials from the [default] section. These credentials are required for xl up in order to connect to your AWS EKS cluster"

    - name: AWSAccessKey
      type: SecretInput
      prompt: "What is the AWS access key ID?"
      promptIf: !expr "!useAWSconfig && K8sSetup == 'AWS EKS' "
      saveInXlvals: true
      replaceAsIs: true
      default: !expr "K8sSetup == 'AWS EKS' ? awsCredentials('AccessKeyID')"
      description: "Your AWS access key ID. AWS access key ID is required for xl up in order to connect to your AWS EKS cluster"

    - name: AWSAccessSecret
      type: SecretInput
      prompt: "What is the AWS secret access key?"
      promptIf: !expr "!useAWSconfig && K8sSetup == 'AWS EKS' "
      saveInXlvals: true
      replaceAsIs: true
      default: !expr "K8sSetup == 'AWS EKS' ? awsCredentials('SecretAccessKey')"
      description: "Your AWS secret access key. AWS secret access key is required for xl up in order to connect to your AWS EKS cluster"

    - name: Namespace
      type: Input
      saveInXlvals: true
      prompt: "Enter the name of the Kubernetes namespace where the XebiaLabs DevOps Platform will be installed:"
      value: xebialabs
      description: "The namespace to install the XebiaLabs Devops Platform into"

    - name: useCustomRegistry
      type: Confirm
      prompt: "Do you want to use custom Docker Registry?"
      default: false
      saveInXlvals: true
      description: "When running in a segregated network setup you may have downloaded the official Xebialabs docker containers and pushed them into your private docker registry. Another use case is when you have created a custom Xebialabs docker container for having additional plugins, extensions or java libraries and pushed these custom container to your custom docker registry. It might be necessary to specify a custom internal Docker registry to pull the XebiaLabs Devops Platform images from."

    - name: registryURL
      type: Input
      prompt: "Enter your Docker registry URL and organization:"
      promptIf: !expr "useCustomRegistry"
      default: "docker.io/xebialabs"
      saveInXlvals: true
      description: "When using a custom Docker registry, enter the URL of that registry here. If the the docker registry you are using is Dockerhub then your registry url will look like: docker.io/MY_COMPANY. If you have an internal docker registry then it may look like: xl-docker.xebialabs.com "

    - name: dockerUser
      type: Input
      prompt: "Enter your Docker Registry username:"
      promptIf: !expr "useCustomRegistry"
      default: " "
      saveInXlvals: true
      description: "When using a custom Docker registry that requires authentication, pass that username in here"

    - name: dockerPass
      type: SecretInput
      prompt: "Enter your Docker Registry password:"
      promptIf: !expr "useCustomRegistry"
      saveInXlvals: true
      replaceAsIs: true
      description: "When using a custom Docker registry that requires authentication, pass that password in here"

    - name: InstallXLD
      type: Confirm
      prompt: "Would you like to install XL Deploy?"
      default: true
      saveInXlvals: true
      description: "Whether or not you would like to install XL Deploy"

    - name: xldVersion
      type: Input
      saveInXlvals: true
      prompt: "Enter your custom XL Deploy image and tag:"
      default: "xl-deploy:8.5.3"
      promptIf: !expr "useCustomRegistry && InstallXLD"
      validate: !expr "version('checkversion', 'xld', xldVersion)"
      description: "This will be the XL Deploy docker image and tag that lives in your private docker registry. For example xl-deploy:9.0.3 . When using custom xebialabs docker images from your own private docker registry make sure that the tag follows Semantic Versioning (https://semver.org/)"

      # This question will not be asked but used to extract the tag information which will be used as version
    - name: xldTag
      type: Input
      saveInXlvals: true
      prompt: "Enter the XLD custom image:"
      value: !expr "(useCustomRegistry && InstallXLD) ? version('getversionfromtag', xldVersion) : 'none'"

    - name: InstallXLR
      type: Confirm
      prompt: "Would you like to install XL Release?"
      default: true
      saveInXlvals: true
      description: "Whether or not you would like to install XL Release"

    - name: xlrVersion
      type: Input
      saveInXlvals: true
      prompt: "Enter your custom XL Release image and tag:"
      default: "xl-release:8.5.3"
      promptIf: !expr "useCustomRegistry && InstallXLR"
      validate: !expr "version('checkversion', 'xlr', xlrVersion)"
      description: "This will be the XL Release docker image and tag that lives in your private docker registry. For example xl-release:9.0.3 . When using custom xebialabs docker images from your own private docker registry make sure that the tag follows Semantic Versioning (https://semver.org/)"

      # This question will not be asked but used to extract the tag information which will be used as version
    - name: xlrTag
      type: Input
      saveInXlvals: true
      prompt: "Enter the XLR custom image:"
      value: !expr "(useCustomRegistry && InstallXLR) ? version('getversionfromtag', xlrVersion) : 'none'"

    - name: xlVersion
      type: Select
      saveInXlvals: true
      prompt: "Choose the version of the XebiaLabs DevOps Platform:"
      promptIf: !expr "!useCustomRegistry"
      options:
        - !expr "version('_showapplicableversions')"
      description: "The version of both XL Deploy and XL Release that you would like to install"

    - name: XlRAMRequest
      type: Input
      prompt: "How many RAM resources will be requested for the XebiaLabs POD? Ex: 4Gi"
      saveInXlvals: false
      value: "1.6Gi"
      description: "The amount of RAM to allocate for each XL Deploy and XL Release pod "

    - name: XlCPURequest
      type: Input
      prompt: "How many CPU resources will be requested for the XebiaLabs POD? Ex: 2"
      saveInXlvals: false
      value: "0.7"
      description: "The amount of CPU to allocate for each XL Deploy and XL Release pod"

    - name: dockerRepo
      type: Select
      saveInXlvals: true
      prompt: "Choose a Docker repository:"
      options:
        - xebialabs
      value: xebialabs

    - name: externalDatabase
      type: Confirm
      saveInXlvals: true
      prompt: "Would you like to use an external database:"
      default: false
      description: "xl up will deploy by default a Postgresql instance within your Kubernetes installation save the data of XL Deploy or XL Release. If you want to use your own existing Database then type yes in this question. Make sure that your Database is reachable within the Kubernetes cluster"

    - name: xldAdminPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter the password that you want to use for the XL Deploy admin user:"
      promptIf: !expr "InstallXLD"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true
      description: "The password that you would like to use for the XL Deploy admin user"

    - name: xldLic
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      saveInXlvals: true
      prompt: "Enter the full path to the XL Deploy license file:"
      promptIf: !expr "InstallXLD"
      description: "The local path to an XL Deploy license file"

    - name: xldDbUrl
      type: Input
      saveInXlvals: true
      prompt: "Enter the JDBC url of the database where XL Deploy will save its repository data:"
      promptIf: !expr "externalDatabase && InstallXLD"
      default: jdbc:postgresql://postgresql:5432/xl-deploy
      description: "The JDBC url for your external database. Note that it should include also the db name which you have already created in your Database instance for XL Deploy. For example in case you have an external Postgresql instance  this parameter should look like: jdbc:postgresql://DB_HOSTNAME_OR_IP:PORT/XL_DEPLOY_DB_NAME"

    - name: xldDbName
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Deploy database name:"
      promptIf: !expr "!externalDatabase && InstallXLD"
      default: xl-deploy
      description: "This will be the XL Deploy database name that xl up will create in the  Postgresql instance that will be provisioned in your Kubernetes cluster"

    - name: xldDbUser
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Deploy database username:"
      promptIf: !expr "InstallXLD"
      default: sa
      description: "The database username you want to use when using an external database, or the user to create when choosing to use an in-cluster Posgresql database, that will be associated with XL Deploy"

    - name: xldDbPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter your XL Deploy database password:"
      promptIf: !expr "InstallXLD"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true
      description: "The database password you want to use when using an external database, or the user to create when choosing to use an in-cluster Posgresql database, that will be associated with XL Deploy"

    - name: efsId
      type: Input
      saveInXlvals: true
      prompt: "Enter your Amazon EFS ID:"
      promptIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"
      description: "The ID of the AWS EFS instance which will be used for creating Kubernetes volumes for the shared folders of XL Deploy (work and export directories) or XL Release (export folder). Make sure that the your AWS EFS instance can be mounted in the nodes of your AWS EKS cluster"

    - name: efsRegion
      type: Input
      saveInXlvals: true
      prompt: "Enter your Amazon EFS region:"
      promptIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"
      description: "The region where your AWS EFS instance is created, for example 'eu-west-1'"

    - name: nsfServerHost
      type: Input
      saveInXlvals: true
      prompt: "Enter your NFS server name or IP address:"
      promptIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"
      description: "The IP address of the NFS server which will be used for creating Kubernetes volumes for the shared folders of XL Deploy (work and export directories) or XL Release (export folder). Make sure that the your NFS instance can be reached from nodes of your Kubernetes cluster"

    - name: nsfSharePath
      type: Input
      saveInXlvals: true
      prompt: "Enter your NFS share path:"
      promptIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"
      description: "The share path on the NFS instance that which will be used for creating Kubernetes volumes for the shared folders of XL Deploy (work and export directories) or XL Release (export folder). For example: /xebialabs-share , make sure you type in the forward slash"

    - name: xldWorkHostpath
      type: Input
      saveInXlvals: true
      prompt: "Enter the local directory path that XL Deploy can use as a work directory:"
      promptIf: !expr "K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows' && InstallXLD && OsType != 'linux' "
      description: "Local path to a folder in your machine that will be used as a Kubernetes volume where XL Deploy will persist the data from the work directory. Make sure the folder already exist and it is empty every time you run xl up command for initial deployment"

    - name: xlrAdminPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter the password that you want to use for the XL Release admin user:"
      promptIf: !expr "InstallXLR"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true
      description: "The password that you would like to use for the  XL Release admin user"

    - name: xlrLic
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      saveInXlvals: true
      prompt: "Enter the full path to the XL Release license file:"
      promptIf: !expr "InstallXLR"
      description: "The local path to an XL Release license file"

    - name: xlrDbUrl
      type: Input
      saveInXlvals: true
      prompt: "Enter the JDBC url of the database where XL Release will save its repository data:"
      promptIf: !expr "externalDatabase && InstallXLR"
      default: jdbc:postgresql://postgresql:5432/xl-release
      description: "The JDBC url for your external database. Note that it should include also the db name which you have already created in your Database instance for XL Release repository. For example in case you have an external Postgresql instance  this parameter should look like: jdbc:postgresql://DB_HOSTNAME_OR_IP:PORT/XL_RELEASE_DB_NAME"


    - name: xlrDbName
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Release database name:"
      promptIf: !expr "!externalDatabase && InstallXLR"
      default: xl-release
      description: "This will be the XL Release repository database name that xl up will create in the  Postgresql instance that will be provisioned in your Kubernetes cluster"

    - name: xlrDbUser
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Release database username:"
      promptIf: !expr "InstallXLR"
      default: xl-release
      description: "The database username you want to use when using an external database, or the user to create when choosing to use an in-cluster database, that will be associated with XL Release"

    - name: xlrDbPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter your XL Release database password:"
      promptIf: !expr "InstallXLR"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true
      description: "The database password you want to use when using an external database, or the user to create when choosing to use an in-cluster database, that will be associated with XL Release"

    - name: xlrReportDbUrl
      type: Input
      saveInXlvals: true
      prompt: "Enter the JDBC url of the database where XL Release will save its reporting data:"
      promptIf: !expr "externalDatabase && InstallXLR"
      default: jdbc:postgresql://postgresql:5432/xl-release-report
      description: "The JDBC url for your external database. Note that it should include also the db name which you have already created in your Database instance for XL Release reporting . For example in case you have an external Postgresql instance  this parameter should look like: jdbc:postgresql://DB_HOSTNAME_OR_IP:PORT/XL_RELEASE_REPORTING_DB_NAME"

    - name: xlrReportDbName
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Release report database name:"
      promptIf: !expr "!externalDatabase && InstallXLR"
      default: xl-release-report
      description: "This will be the XL Release reporting database name that xl up will create in the  Postgresql instance that will be provisioned in your Kubernetes cluster"

    - name: xlrReportDbUser
      type: Input
      saveInXlvals: true
      prompt: "Enter your XL Release report database username:"
      promptIf: !expr "InstallXLR"
      default: xl-release-report
      description: "The database username you want to use when using an external database, or the user to create when choosing to use an in-cluster database, that will be associated with XL Release's Reporting Database"

    - name: xlrReportDbPass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter your XL Release report database password:"
      promptIf: !expr "InstallXLR"
      default: !expr "randPassword()"
      revealOnSummary: true
      replaceAsIs: true
      description: "The database password you want to use when using an external database, or the user to create when choosing to use an in-cluster database, that will be associated with XL Release's Reporting Database"

    - name: xlKeyStore
      type: File
      # type: SecretFile should be put after bug https://xebialabs.atlassian.net/browse/LOVE-1162 is fixed
      saveInXlvals: true
      prompt: "Enter the full path to your XebiaLabs keystore:"
      description: "The local path to a JCEKS keystore to use in the XebiaLabs Devops Platform. This facilitates encryption of passwords and secrets in XL Deploy or XL Release. You can use keytool to generate a keystore, for example: keytool -genseckey -alias deployit-passsword-key -keyalg aes -keysize 128 -keypass deployit -keystore /tmp/repository-keystore.jceks -storetype jceks -storepass test123"

    - name: xlKeyStorePass
      type: SecretInput
      saveInXlvals: true
      prompt: "Enter your XebiaLabs keystore password:"
      replaceAsIs: true
      description: "The password of the provided keystore"

    - name: InstallMonitoring
      type: Confirm
      prompt: "Do you want to install monitoring?"
      default: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
      saveInXlvals: true
      description: "Whether or not to install monitoring utilities (ElasticSearch, Kibana, Grafana, FluentD, Kube State Metric server and Prometheus) in your cluster"

    - name: MonitoringDataRetention
      type: Input
      prompt: "How many days do you want to keep the monitoring data?"
      default: 7
      promptIf: !expr "InstallMonitoring"
      description: "How long to retain monitoring data for"

    - name: monitoringUser
      type: Input
      saveInXlvals: true
      prompt: "What is the username for the monitoring user?"
      default: admin
      promptIf: !expr "InstallMonitoring"
      description: "The username to use for accessing Grafana and Kibana"

    - name: monitoringUserPass
      type: SecretInput
      replaceAsIs: true
      saveInXlvals: true
      prompt: "What is the password for the monitoring user?"
      default: !expr "randPassword()"
      promptIf: !expr "InstallMonitoring"
      revealOnSummary: true
      description: "The password to use for accessing Grafana and Kibana"

    - name: PostgresqlWorkHostpath
      type: Input
      saveInXlvals: true
      prompt: "Enter the local directory path where PostgreSQL can store its data:"
      promptIf: !expr "K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"
      description: "Local path to a folder in your machine that will be used as a Kubernetes volume where Postgresql will persist the its data. Make sure the folder already exist and it is empty every time you run xl up command for initial deployment"


    - name: postgresMaxConn
      type: Input
      saveInXlvals: true
      prompt: "Specify the max_connections parameter for PostgreSQL:"
      default: 512
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"
      description: "The maximum number of connections to allow on the installed PostgreSQL instance. This should always be above 50"


    - name: postgresSharedBuff
      type: Input
      saveInXlvals: true
      prompt: "Specify the shared_buffers parameter for PostgreSQL:"
      default: 512MB
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"
      description: "The amount of system buffer space to allocate to the PostgreSQL instance"

    - name: postgresEffectCacheSize
      type: Input
      saveInXlvals: true
      prompt: "Specify the effective_cache_size parameter for PostgreSQL:"
      default: 1GB
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"
      description: "The amount of cache space to allocate to the PostgreSQL instance"


    - name: postgresSyncCommit
      type: Input
      saveInXlvals: true
      prompt: "Specify the synchronous_commit parameter for PostgreSQL:"
      default: "off"
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"
      description: "Turn on if you want synchronous commits in PostgreSQL"

    - name: postgresMaxWallSize
      type: Input
      saveInXlvals: true
      prompt: "Specify the max_wal_size parameter for PostgreSQL:"
      default: 256MB
      promptIf: !expr "K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows' && !externalDatabase"
      description: "The maximum size the WAL can reach before being flushed"

  files:
    #xl-k8s-foundation
    - path: xebialabs/xl-k8s-foundation.yaml.tmpl
    - path: xebialabs/kubernetes/xl-k8s-foundation/ha-proxy-ingress-controller/ingress-controller.yaml.tmpl
    - path: xebialabs/kubernetes/xl-k8s-foundation/ha-proxy-ingress-controller/service-l7.yaml.tmpl
      writeIf: !expr "K8sSetup == 'AWS EKS' || K8sSetup == 'Google Kubernetes Engine'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/ha-proxy-ingress-controller/default-backend.yaml.tmpl
    - path: xebialabs/kubernetes/xl-k8s-foundation/xebialabs-service-internal.yaml.tmpl
    - path: xebialabs/kubernetes/xl-k8s-foundation/aws-gp2-storageclass.yaml.tmpl
      writeIf: !expr "K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/gcp-pd-retain-storageclass.yaml.tmpl
      writeIf: !expr "K8sSetup == 'Google Kubernetes Engine'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/dockercred.yaml.tmpl
      writeIf: !expr "useCustomRegistry"
    - path: xebialabs/kubernetes/xl-k8s-foundation/postgresql/xl-postgresql.yaml.tmpl
      writeIf: !expr "!externalDatabase"
    - path: xebialabs/kubernetes/xl-k8s-foundation/nfs-client-provisioner/rbac.yaml.tmpl
      writeIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/nfs-client-provisioner/deployment.yaml.tmpl
      writeIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"
    - path: xebialabs/kubernetes/xl-k8s-foundation/nfs-client-provisioner/storageclass.yaml.tmpl
      writeIf: !expr "K8sSetup == 'Plain multinode K8s cluster' || K8sSetup == 'Google Kubernetes Engine'"
    #xl-deploy
    - path: xebialabs/xl-deploy.yaml.tmpl
      writeIf: InstallXLD
    - path: xebialabs/kubernetes/xl-deploy/local-db/xld-deployment-single-node.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/aws-efs/aws-efs-storageclass.yaml.tmpl
      writeIf:  !expr "InstallXLD && K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/aws-efs/aws-efs-rbac.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/aws-efs/aws-efs-deployment.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/aws-efs/aws-efs-conf.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup == 'AWS EKS'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/xld-deployment-master.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/xld-deployment-worker.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/export-pvc.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-deploy/external-db/active-active/work-pvc.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    #xl-release
    - path: xebialabs/xl-release.yaml.tmpl
      writeIf: InstallXLR
    - path: xebialabs/kubernetes/xl-release/external-db/active-active/xlr-deployment-active.yaml.tmpl
      writeIf: !expr "InstallXLR && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-release/local-db/xlr-deployment-single-node.yaml.tmpl
      writeIf: !expr "InstallXLR && K8sSetup == 'Local K8s from Docker Desktop for Mac/Windows'"
    - path: xebialabs/kubernetes/xl-release/external-db/active-active/pvc.yaml.tmpl
      writeIf: !expr "InstallXLD && K8sSetup != 'Local K8s from Docker Desktop for Mac/Windows'"
    #efk
    - path: xebialabs/kubernetes/efk-stack/elasticsearch/rbac.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/elasticsearch/deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/es-curator/cronjob.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/es-curator/configmap.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/fluentd/rbac.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/fluentd/configmap.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/fluentd/daemonset.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/kibana/deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/kibana/ingress.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/efk-stack/kibana/dashboard-job.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    #pg-stack
    - path: xebialabs/kubernetes/pg-stack/prometheus/rbac.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/prometheus/configmap.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/prometheus/deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/configmap.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/secret.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/pvc.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/ingress.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/grafana/importer-job.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-cluster-role.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-cluster-role-binding.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-deployment.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-role.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-role-binding.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-service.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    - path: xebialabs/kubernetes/pg-stack/kube-state-metrics/kube-state-metrics-service-account.yaml.tmpl
      writeIf: !expr "InstallMonitoring"
    #xebialabs files
    - path: xebialabs.yaml.tmpl
    - path: xebialabs/common.yaml.tmpl
    - path: xebialabs/deployments.yaml.tmpl
    - path: xebialabs/answers.yaml.tmpl
